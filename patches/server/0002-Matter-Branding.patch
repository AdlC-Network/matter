From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Apehum <apehumchik@gmail.com>
Date: Thu, 16 Dec 2021 04:16:54 +0800
Subject: [PATCH] Matter Branding


diff --git a/build.gradle.kts b/build.gradle.kts
index 9521971e9e597834e785b36d1657064dc1621b9b..af040f475d8db1478bb778dee97262e95fb64349 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -9,7 +9,7 @@ plugins {
 }
 
 dependencies {
-    implementation(project(":pufferfish-api")) // Pufferfish // Paper
+    implementation(project(":matter-api")) // Matter // Pufferfish // Paper
     // Pufferfish start
     implementation("io.papermc.paper:paper-mojangapi:1.18.2-R0.1-SNAPSHOT") {
         exclude("io.papermc.paper", "paper-api")
@@ -78,7 +78,7 @@ tasks.jar {
         attributes(
             "Main-Class" to "org.bukkit.craftbukkit.Main",
             "Implementation-Title" to "CraftBukkit",
-            "Implementation-Version" to "git-Pufferfish-$implementationVersion", // Pufferfish
+            "Implementation-Version" to "git-Matter-$implementationVersion", // Matter // Pufferfish
             "Implementation-Vendor" to date, // Paper
             "Specification-Title" to "Bukkit",
             "Specification-Version" to project.version,
diff --git a/src/main/java/com/destroystokyo/paper/console/PaperConsole.java b/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
index e0b1f0671d16ddddcb6725acd25a1d1d69e42701..63384b9353e71e9d310528235f1a39d58489ae55 100644
--- a/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
+++ b/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
@@ -17,7 +17,7 @@ public final class PaperConsole extends SimpleTerminalConsole {
     @Override
     protected LineReader buildReader(LineReaderBuilder builder) {
         builder
-                .appName("Paper")
+                .appName("Matter") // Matter
                 .variable(LineReader.HISTORY_FILE, java.nio.file.Paths.get(".console_history"))
                 .completer(new ConsoleCommandCompleter(this.server))
                 .option(LineReader.Option.COMPLETE_IN_WORD, true);
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 371b0f95b23d67c9913875a3dd7888e722551f18..9026f9c2bde769af2dc32e0909ad1c01f2b79dc4 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1695,7 +1695,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     @DontObfuscate
     public String getServerModName() {
-        return "Pufferfish"; // Pufferfish - Pufferfish > // Paper - Paper > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
+        return "Matter"; // Matter - Matter > // Pufferfish - Pufferfish > // Paper - Paper > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
     }
 
     public SystemReport fillSystemReport(SystemReport details) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 07f082514a28118c5ab49ca68560f7e838abf3ea..e4f117239c46aea75370e152c95b092160c7ca05 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -250,7 +250,7 @@ import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
 
 public final class CraftServer implements Server {
-    private final String serverName = "Pufferfish"; // Paper // Pufferfish
+    private final String serverName = "Matter"; // Paper // Pufferfish // Matter
     private final String serverVersion;
     private final String bukkitVersion = Versioning.getBukkitVersion();
     private final Logger logger = Logger.getLogger("Minecraft");
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index fbe68bd4739d9a0e7d9bc4c3d5ba8ecfd2d13954..dc8bf6907e69868b2f28c556c3ba35b3c8a5f705 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -265,7 +265,7 @@ public class Main {
                     if (buildDate.before(deadline.getTime())) {
                         // Paper start - This is some stupid bullshit
                         System.err.println("*** Warning, you've not updated in a while! ***");
-                        System.err.println("*** Please download a new build as per instructions from https://papermc.io/downloads ***"); // Paper
+                        System.err.println("*** Please download a new build as per instructions from https://matter.plo.su/ ***"); // Paper // Matter
                         //System.err.println("*** Server will start in 20 seconds ***");
                         //Thread.sleep(TimeUnit.SECONDS.toMillis(20));
                         // Paper End
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 7e06f263cf618b82f77101ef86d819d5dc37a24e..cb5b5e36fa365607c19d49f3a4d81f142b6e0760 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -430,7 +430,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     @Override
     public com.destroystokyo.paper.util.VersionFetcher getVersionFetcher() {
-        return new gg.pufferfish.pufferfish.PufferfishVersionFetcher(); // Pufferfish
+        return new su.plo.matter.MatterVersionFetcher(); // Pufferfish // Matter
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
index 80553face9c70c2a3d897681e7761df85b22d464..c4831e424782b83ae81b4b948ff52c25949a19b7 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
@@ -11,7 +11,7 @@ public final class Versioning {
     public static String getBukkitVersion() {
         String result = "Unknown-Version";
 
-        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/gg.pufferfish.pufferfish/pufferfish-api/pom.properties"); // Pufferfish
+        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/su.plo.matter/matter-api/pom.properties"); // Pufferfish // Matter
         Properties properties = new Properties();
 
         if (stream != null) {
diff --git a/src/main/java/su/plo/matter/MatterVersionFetcher.java b/src/main/java/su/plo/matter/MatterVersionFetcher.java
new file mode 100644
index 0000000000000000000000000000000000000000..3de5c2def719c799a2f497e43e18359ff50ff948
--- /dev/null
+++ b/src/main/java/su/plo/matter/MatterVersionFetcher.java
@@ -0,0 +1,137 @@
+package su.plo.matter;
+
+import com.destroystokyo.paper.VersionHistoryManager;
+import com.destroystokyo.paper.util.VersionFetcher;
+import com.google.gson.Gson;
+import com.google.gson.JsonObject;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.JoinConfiguration;
+import net.kyori.adventure.text.format.NamedTextColor;
+import net.kyori.adventure.text.format.TextDecoration;
+import org.bukkit.craftbukkit.CraftServer;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.IOException;
+import java.net.URI;
+import java.net.http.HttpClient;
+import java.net.http.HttpRequest;
+import java.net.http.HttpResponse;
+import java.nio.charset.StandardCharsets;
+import java.util.concurrent.TimeUnit;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+import static net.kyori.adventure.text.Component.text;
+import static net.kyori.adventure.text.format.NamedTextColor.GREEN;
+import static net.kyori.adventure.text.format.NamedTextColor.RED;
+
+public class MatterVersionFetcher implements VersionFetcher {
+    private static final Logger LOGGER = Logger.getLogger("MatterVersionFetcher");
+    private static final HttpClient client = HttpClient.newHttpClient();
+
+    private static final URI JENKINS_URI = URI.create("https://matter.plo.su/job/Matter-1.18/lastSuccessfulBuild/buildNumber");
+    private static final String GITHUB_FORMAT = "https://api.github.com/repos/plasmoapp/matter/compare/ver/pufferfish-1.18...%s";
+
+    private static final HttpResponse.BodyHandler<JsonObject> JSON_OBJECT_BODY_HANDLER = responseInfo -> HttpResponse.BodySubscribers.mapping(
+            HttpResponse.BodySubscribers.ofString(StandardCharsets.UTF_8),
+            string -> new Gson().fromJson(string, JsonObject.class)
+    );
+
+    @Override
+    public long getCacheTime() {
+        return TimeUnit.MINUTES.toMillis(30);
+    }
+
+    @Override
+    public @NotNull Component getVersionMessage(final @NotNull String serverVersion) {
+        final String[] parts = CraftServer.class.getPackage().getImplementationVersion().split("-");
+        @NotNull Component component;
+
+        if (parts.length != 3) {
+            component = text("Unknown server version.", RED);
+        } else {
+            final String versionString = parts[2];
+
+            try {
+                component = this.fetchJenkinsVersion(Integer.parseInt(versionString));
+            } catch (NumberFormatException e) {
+                component = this.fetchGithubVersion(versionString.substring(1, versionString.length() - 1));
+            }
+        }
+
+        final @Nullable Component history = this.getHistory();
+        return history != null ? Component.join(JoinConfiguration.noSeparators(), component, Component.newline(), this.getHistory()) : component;
+    }
+
+    private @NotNull
+    Component fetchJenkinsVersion(final int versionNumber) {
+        final HttpRequest request = HttpRequest.newBuilder(JENKINS_URI).build();
+        try {
+            final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
+            if (response.statusCode() != 200) {
+                return text("Received invalid status code (" + response.statusCode() + ") from server.", RED);
+            }
+
+            int latestVersionNumber;
+            try {
+                latestVersionNumber = Integer.parseInt(response.body());
+            } catch (NumberFormatException e) {
+                LOGGER.log(Level.WARNING, "Received invalid response from Jenkins \"" + response.body() + "\".");
+                return text("Received invalid response from server.", RED);
+            }
+
+            final int versionDiff = latestVersionNumber - versionNumber;
+            return this.getResponseMessage(versionDiff);
+        } catch (IOException | InterruptedException e) {
+            LOGGER.log(Level.WARNING, "Failed to look up version from Jenkins", e);
+            return text("Failed to retrieve version from server.", RED);
+        }
+    }
+
+    // Based off code contributed by Techcable <Techcable@outlook.com> in Paper/GH-65
+    private @NotNull
+    Component fetchGithubVersion(final @NotNull String hash) {
+        final URI uri = URI.create(String.format(GITHUB_FORMAT, hash));
+        final HttpRequest request = HttpRequest.newBuilder(uri).build();
+        try {
+            final HttpResponse<JsonObject> response = client.send(request, JSON_OBJECT_BODY_HANDLER);
+            if (response.statusCode() != 200) {
+                return text("Received invalid status code (" + response.statusCode() + ") from server.", RED);
+            }
+
+            final JsonObject obj = response.body();
+            final int versionDiff = obj.get("behind_by").getAsInt();
+
+            return this.getResponseMessage(versionDiff);
+        } catch (IOException | InterruptedException e) {
+            LOGGER.log(Level.WARNING, "Failed to look up version from GitHub", e);
+            return text("Failed to retrieve version from server.", RED);
+        }
+    }
+
+    private @NotNull
+    Component getResponseMessage(final int versionDiff) {
+        return switch (Math.max(-1, Math.min(1, versionDiff))) {
+            case -1 -> text("You are running an unsupported version of Matter.", RED);
+            case 0 -> text("You are on the latest version!", GREEN);
+            default -> text("You are running " + versionDiff + " version" + (versionDiff == 1 ? "" : "s") + " beyond. " +
+                    "Please update your server when possible to maintain stability, security, and receive the latest optimizations.", RED);
+        };
+    }
+
+    private @Nullable
+    Component getHistory() {
+        final VersionHistoryManager.VersionData data = VersionHistoryManager.INSTANCE.getVersionData();
+        if (data == null) {
+            return null;
+        }
+
+        final String oldVersion = data.getOldVersion();
+        if (oldVersion == null) {
+            return null;
+        }
+
+        return text("Previous version: " + oldVersion, NamedTextColor.GRAY, TextDecoration.ITALIC);
+    }
+}
\ No newline at end of file
